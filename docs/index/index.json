{"includedArchiveIdentifiers":["BigInt"],"interfaceLanguages":{"swift":[{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/&(_:_:)-iwcn","title":"static func & (inout BigInt, BigInt) -> BigInt","type":"op"},{"path":"\/documentation\/bigint\/bigint\/&__(_:_:)-9eday","title":"static func &<< (BigInt, BigInt) -> BigInt","type":"op"},{"path":"\/documentation\/bigint\/bigint\/&__(_:_:)-9v4op","title":"static func &>> (BigInt, BigInt) -> BigInt","type":"op"},{"path":"\/documentation\/bigint\/bigint\/&__=(_:_:)-1zawr","title":"static func &>>= (inout BigInt, BigInt)","type":"op"},{"path":"\/documentation\/bigint\/bigint\/&__=(_:_:)-ys3","title":"static func &<<= (inout BigInt, BigInt)","type":"op"},{"path":"\/documentation\/bigint\/bigint\/_(_:_:)-3fs3d","title":"static func ^ (inout BigInt, BigInt) -> BigInt","type":"op"},{"path":"\/documentation\/bigint\/bigint\/_(_:_:)-ji3u","title":"static func | (inout BigInt, BigInt) -> BigInt","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/init()-416p0","title":"init()","type":"init"},{"path":"\/documentation\/bigint\/bigint\/init(_:)-2xsul","title":"init(BigUInt)","type":"init"},{"path":"\/documentation\/bigint\/bigint\/init(_:)-4jpxh","title":"init(UnsafeRawBufferPointer)","type":"init"},{"path":"\/documentation\/bigint\/bigint\/init(_:)-7tvup","title":"init(Data)","type":"init"},{"path":"\/documentation\/bigint\/bigint\/init(_:radix:)","title":"init?<S>(S, radix: Int)","type":"init"},{"path":"\/documentation\/bigint\/bigint\/init(sign:magnitude:)","title":"init(sign: BigInt.Sign, magnitude: BigUInt)","type":"init"},{"path":"\/documentation\/bigint\/bigint\/init(words:)","title":"init<S>(words: S)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/iszero","title":"var isZero: Bool","type":"property"},{"path":"\/documentation\/bigint\/bigint\/magnitude-swift.property","title":"var magnitude: BigUInt","type":"property"},{"path":"\/documentation\/bigint\/bigint\/sign-swift.property","title":"var sign: BigInt.Sign","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/greatestcommondivisor(with:)","title":"func greatestCommonDivisor(with: BigInt) -> BigInt","type":"method"},{"path":"\/documentation\/bigint\/bigint\/inverse(_:)","title":"func inverse(BigInt) -> BigInt?","type":"method"},{"path":"\/documentation\/bigint\/bigint\/isprime(rounds:)","title":"func isPrime(rounds: Int) -> Bool","type":"method"},{"path":"\/documentation\/bigint\/bigint\/isstrongprobableprime(_:)","title":"func isStrongProbablePrime(BigInt) -> Bool","type":"method"},{"path":"\/documentation\/bigint\/bigint\/modulus(_:)","title":"func modulus(BigInt) -> BigInt","type":"method"},{"path":"\/documentation\/bigint\/bigint\/power(_:)","title":"func power(Int) -> BigInt","type":"method"},{"path":"\/documentation\/bigint\/bigint\/power(_:modulus:)","title":"func power(BigInt, modulus: BigInt) -> BigInt","type":"method"},{"path":"\/documentation\/bigint\/bigint\/serialize()","title":"func serialize() -> Data","type":"method"},{"path":"\/documentation\/bigint\/bigint\/signum()","title":"func signum() -> BigInt","type":"method"},{"path":"\/documentation\/bigint\/bigint\/squareroot()","title":"func squareRoot() -> BigInt","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/magnitude-swift.typealias","title":"BigInt.Magnitude","type":"typealias"},{"path":"\/documentation\/bigint\/bigint\/word","title":"BigInt.Word","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/issigned-5fyf2","title":"static var isSigned: Bool","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/sign-swift.enum\/minus","title":"case minus","type":"case"},{"path":"\/documentation\/bigint\/bigint\/sign-swift.enum\/plus","title":"case plus","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/sign-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/bigint\/bigint\/sign-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/bigint\/bigint\/sign-swift.enum","title":"BigInt.Sign","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/+(_:)","title":"static func + (Self) -> Self","type":"op"},{"path":"\/documentation\/bigint\/bigint\/+=(_:_:)-3y6od","title":"static func += (inout Self, Self)","type":"op"},{"path":"\/documentation\/bigint\/bigint\/-=(_:_:)-9ym7c","title":"static func -= (inout Self, Self)","type":"op"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/zero","title":"static var zero: Self","type":"property"}],"path":"\/documentation\/bigint\/bigint\/additivearithmetic-implementations","title":"AdditiveArithmetic Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/indices-swift.property","title":"var indices: BigInt.Words.Indices","type":"property"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/startindex","title":"var startIndex: Int","type":"property"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/subscript(_:)","title":"subscript(Int) -> UInt","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/indices-swift.typealias","title":"BigInt.Words.Indices","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/firstrange(of:)-6v6ns","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/firstrange(of:)-1yo3m","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/indices(of:)","title":"func indices(of: Self.Element) -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/indices(where:)","title":"func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/map(_:)-3nxcc","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/removingsubranges(_:)","title":"func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"}],"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"}],"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/filter(_:)-3zvyz","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/filter(_:)-4yn8t","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/flatmap(_:)-4zycj","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/flatmap(_:)-62tom","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/map(_:)-4k48p","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/sorted(using:)-3j7n6","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/sorted(using:)-7hf9w","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/bigint\/bigint\/words-swift.struct\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/bigint\/bigint\/words-swift.struct","title":"BigInt.Words","type":"struct"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/!=(_:_:)-3bni3","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/bigint\/!=(_:_:)-9xzsv","title":"static func != <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/bigint\/&(_:_:)-5b5sk","title":"static func & (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/bigint\/bigint\/&=(_:_:)","title":"static func &= (inout BigInt, BigInt)","type":"op"},{"path":"\/documentation\/bigint\/bigint\/*(_:_:)","title":"static func * (BigInt, BigInt) -> BigInt","type":"op"},{"path":"\/documentation\/bigint\/bigint\/*=(_:_:)","title":"static func *= (inout BigInt, BigInt)","type":"op"},{"path":"\/documentation\/bigint\/bigint\/+(_:_:)","title":"static func + (BigInt, BigInt) -> BigInt","type":"op"},{"path":"\/documentation\/bigint\/bigint\/+=(_:_:)-4p7tb","title":"static func += (inout BigInt, BigInt)","type":"op"},{"path":"\/documentation\/bigint\/bigint\/-(_:_:)","title":"static func - (BigInt, BigInt) -> BigInt","type":"op"},{"path":"\/documentation\/bigint\/bigint\/-=(_:_:)-9oena","title":"static func -= (inout BigInt, BigInt)","type":"op"},{"path":"\/documentation\/bigint\/bigint\/==(_:_:)-4b64d","title":"static func == <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/bigint\/_(_:_:)-218l1","title":"static func ^ (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/bigint\/bigint\/_(_:_:)-5dwi2","title":"static func > <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/bigint\/_(_:_:)-5ex7h","title":"static func < <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/bigint\/_(_:_:)-893s2","title":"static func % (BigInt, BigInt) -> BigInt","type":"op"},{"path":"\/documentation\/bigint\/bigint\/_(_:_:)-931w","title":"static func | (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/bigint\/bigint\/_(_:_:)-9x9mk","title":"static func \/ (BigInt, BigInt) -> BigInt","type":"op"},{"path":"\/documentation\/bigint\/bigint\/_=(_:_:)-1pe5q","title":"static func %= (inout BigInt, BigInt)","type":"op"},{"path":"\/documentation\/bigint\/bigint\/_=(_:_:)-2iz5t","title":"static func >= <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/bigint\/_=(_:_:)-2vuuk","title":"static func |= (inout BigInt, BigInt)","type":"op"},{"path":"\/documentation\/bigint\/bigint\/_=(_:_:)-8ftd7","title":"static func \/= (inout BigInt, BigInt)","type":"op"},{"path":"\/documentation\/bigint\/bigint\/_=(_:_:)-baha","title":"static func <= <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/bigint\/_=(_:_:)-jxj9","title":"static func ^= (inout BigInt, BigInt)","type":"op"},{"path":"\/documentation\/bigint\/bigint\/__(_:_:)-2x8fw","title":"static func << <RHS>(Self, RHS) -> Self","type":"op"},{"path":"\/documentation\/bigint\/bigint\/__(_:_:)-46fpj","title":"static func >> <RHS>(Self, RHS) -> Self","type":"op"},{"path":"\/documentation\/bigint\/bigint\/__(_:_:)-5frf5","title":"static func >> <Other>(BigInt, Other) -> BigInt","type":"op"},{"path":"\/documentation\/bigint\/bigint\/__(_:_:)-5znu7","title":"static func << <Other>(BigInt, Other) -> BigInt","type":"op"},{"path":"\/documentation\/bigint\/bigint\/__=(_:_:)-5hyf9","title":"static func <<= <Other>(inout BigInt, Other)","type":"op"},{"path":"\/documentation\/bigint\/bigint\/__=(_:_:)-5mbbx","title":"static func >>= <Other>(inout BigInt, Other)","type":"op"},{"path":"\/documentation\/bigint\/bigint\/~(_:)","title":"static func ~ (BigInt) -> BigInt","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/init()-3wjrc","title":"init()","type":"init"},{"path":"\/documentation\/bigint\/bigint\/init(_:)-2kj01","title":"init<T>(T)","type":"init"},{"path":"\/documentation\/bigint\/bigint\/init(_:)-up9u","title":"init<T>(T)","type":"init"},{"path":"\/documentation\/bigint\/bigint\/init(_:format:lenient:)-17mqt","title":"init(String, format: IntegerFormatStyle<Self>, lenient: Bool) throws","type":"init"},{"path":"\/documentation\/bigint\/bigint\/init(_:format:lenient:)-3wz9u","title":"init(String, format: IntegerFormatStyle<Self>.Percent, lenient: Bool) throws","type":"init"},{"path":"\/documentation\/bigint\/bigint\/init(_:format:lenient:)-76a2j","title":"init(String, format: IntegerFormatStyle<Self>.Currency, lenient: Bool) throws","type":"init"},{"path":"\/documentation\/bigint\/bigint\/init(_:strategy:)-1tkgl","title":"init<S>(S.ParseInput, strategy: S) throws","type":"init"},{"path":"\/documentation\/bigint\/bigint\/init(_:strategy:)-4pcmu","title":"init<S>(S.ParseInput, strategy: S) throws","type":"init"},{"path":"\/documentation\/bigint\/bigint\/init(clamping:)","title":"init<T>(clamping: T)","type":"init"},{"path":"\/documentation\/bigint\/bigint\/init(exactly:)-88g91","title":"init?<T>(exactly: T)","type":"init"},{"path":"\/documentation\/bigint\/bigint\/init(truncatingifneeded:)","title":"init<T>(truncatingIfNeeded: T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/bitwidth","title":"var bitWidth: Int","type":"property"},{"path":"\/documentation\/bigint\/bigint\/trailingzerobitcount","title":"var trailingZeroBitCount: Int","type":"property"},{"path":"\/documentation\/bigint\/bigint\/words-swift.property","title":"var words: BigInt.Words","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/bigint\/bigint\/formatted(_:)-5oeld","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/bigint\/bigint\/formatted(_:)-mdcv","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/bigint\/bigint\/ismultiple(of:)","title":"func isMultiple(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/bigint\/bigint\/quotientandremainder(dividingby:)","title":"func quotientAndRemainder(dividingBy: BigInt) -> (quotient: BigInt, remainder: BigInt)","type":"method"}],"path":"\/documentation\/bigint\/bigint\/binaryinteger-implementations","title":"BinaryInteger Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/'...(_:)-5iv7x","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/bigint\/bigint\/'...(_:)-8y2pm","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/bigint\/bigint\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/bigint\/bigint\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/bigint\/bigint\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/bigint\/bigint\/_(_:_:)-1mrit","title":"static func < (BigInt, BigInt) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/bigint\/_(_:_:)-4phsr","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/bigint\/_(_:_:)-7n20y","title":"static func < (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/bigint\/_(_:_:)-8ph02","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/bigint\/_=(_:_:)-2lggr","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/bigint\/_=(_:_:)-2xo16","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/bigint\/_=(_:_:)-60voa","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/bigint\/_=(_:_:)-6zl59","title":"static func >= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/bigint\/bigint\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/playgrounddescription","title":"var playgroundDescription: Any","type":"property"}],"path":"\/documentation\/bigint\/bigint\/customplaygrounddisplayconvertible-implementations","title":"CustomPlaygroundDisplayConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/bigint\/bigint\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/init(from:)","title":"init(from: any Decoder) throws","type":"init"}],"path":"\/documentation\/bigint\/bigint\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/bigint\/bigint\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/!=(_:_:)-9tuvb","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/bigint\/==(_:_:)-58vlr","title":"static func == (BigInt, BigInt) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/bigint\/==(_:_:)-7e1gm","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/bigint\/bigint\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/init(extendedgraphemeclusterliteral:)-4wrre","title":"init(extendedGraphemeClusterLiteral: String)","type":"init"},{"path":"\/documentation\/bigint\/bigint\/init(extendedgraphemeclusterliteral:)-8a7xe","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/bigint\/bigint\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/init(integerliteral:)","title":"init(integerLiteral: Int64)","type":"init"}],"path":"\/documentation\/bigint\/bigint\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/init(stringliteral:)","title":"init(stringLiteral: StringLiteralType)","type":"init"}],"path":"\/documentation\/bigint\/bigint\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: UnicodeScalar)","type":"init"}],"path":"\/documentation\/bigint\/bigint\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/bigint\/bigint\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/init(exactly:)-4cfue","title":"init?<T>(exactly: T)","type":"init"}],"path":"\/documentation\/bigint\/bigint\/numeric-implementations","title":"Numeric Implementations","type":"symbol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/issigned-86ve9","title":"static var isSigned: Bool","type":"property"}],"path":"\/documentation\/bigint\/bigint\/signedinteger-implementations","title":"SignedInteger Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/-(_:)","title":"static func - (Self) -> Self","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/negate()-8cxml","title":"func negate()","type":"method"},{"path":"\/documentation\/bigint\/bigint\/negate()-9mlkt","title":"func negate()","type":"method"}],"path":"\/documentation\/bigint\/bigint\/signednumeric-implementations","title":"SignedNumeric Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/advanced(by:)","title":"func advanced(by: BigInt.Stride) -> BigInt","type":"method"},{"path":"\/documentation\/bigint\/bigint\/distance(to:)","title":"func distance(to: BigInt) -> BigInt.Stride","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/bigint\/bigint\/stride","title":"BigInt.Stride","type":"typealias"}],"path":"\/documentation\/bigint\/bigint\/strideable-implementations","title":"Strideable Implementations","type":"symbol"}],"path":"\/documentation\/bigint\/bigint","title":"BigInt","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/init()-sbkm","title":"init()","type":"init"},{"path":"\/documentation\/bigint\/biguint\/init(_:)-33kch","title":"init(UnsafeRawBufferPointer)","type":"init"},{"path":"\/documentation\/bigint\/biguint\/init(_:)-4ohlu","title":"init(Data)","type":"init"},{"path":"\/documentation\/bigint\/biguint\/init(_:radix:)","title":"init?<S>(S, radix: Int)","type":"init"},{"path":"\/documentation\/bigint\/biguint\/init(words:)-2g41y","title":"init<Words>(words: Words)","type":"init"},{"path":"\/documentation\/bigint\/biguint\/init(words:)-33w61","title":"init(words: [BigUInt.Word])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/iszero","title":"var isZero: Bool","type":"property"},{"path":"\/documentation\/bigint\/biguint\/leadingzerobitcount","title":"var leadingZeroBitCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/decrement(shiftedby:)","title":"func decrement(shiftedBy: Int)","type":"method"},{"path":"\/documentation\/bigint\/biguint\/greatestcommondivisor(with:)","title":"func greatestCommonDivisor(with: BigUInt) -> BigUInt","type":"method"},{"path":"\/documentation\/bigint\/biguint\/inverse(_:)","title":"func inverse(BigUInt) -> BigUInt?","type":"method"},{"path":"\/documentation\/bigint\/biguint\/isprime(rounds:)","title":"func isPrime(rounds: Int) -> Bool","type":"method"},{"path":"\/documentation\/bigint\/biguint\/isstrongprobableprime(_:)","title":"func isStrongProbablePrime(BigUInt) -> Bool","type":"method"},{"path":"\/documentation\/bigint\/biguint\/multiplied(by:)","title":"func multiplied(by: BigUInt) -> BigUInt","type":"method"},{"path":"\/documentation\/bigint\/biguint\/multiplied(byword:)","title":"func multiplied(byWord: BigUInt.Word) -> BigUInt","type":"method"},{"path":"\/documentation\/bigint\/biguint\/multiply(byword:)","title":"func multiply(byWord: BigUInt.Word)","type":"method"},{"path":"\/documentation\/bigint\/biguint\/multiplyandadd(_:_:shiftedby:)","title":"func multiplyAndAdd(BigUInt, BigUInt.Word, shiftedBy: Int)","type":"method"},{"path":"\/documentation\/bigint\/biguint\/power(_:)","title":"func power(Int) -> BigUInt","type":"method"},{"path":"\/documentation\/bigint\/biguint\/power(_:modulus:)","title":"func power(BigUInt, modulus: BigUInt) -> BigUInt","type":"method"},{"path":"\/documentation\/bigint\/biguint\/serialize()","title":"func serialize() -> Data","type":"method"},{"path":"\/documentation\/bigint\/biguint\/squareroot()","title":"func squareRoot() -> BigUInt","type":"method"},{"path":"\/documentation\/bigint\/biguint\/subtract(_:shiftedby:)","title":"func subtract(BigUInt, shiftedBy: Int)","type":"method"},{"path":"\/documentation\/bigint\/biguint\/subtractreportingoverflow(_:shiftedby:)","title":"func subtractReportingOverflow(BigUInt, shiftedBy: Int) -> Bool","type":"method"},{"path":"\/documentation\/bigint\/biguint\/subtracting(_:shiftedby:)","title":"func subtracting(BigUInt, shiftedBy: Int) -> BigUInt","type":"method"},{"path":"\/documentation\/bigint\/biguint\/subtractingreportingoverflow(_:)","title":"func subtractingReportingOverflow(BigUInt) -> (partialValue: BigUInt, overflow: Bool)","type":"method"},{"path":"\/documentation\/bigint\/biguint\/subtractingreportingoverflow(_:shiftedby:)","title":"func subtractingReportingOverflow(BigUInt, shiftedBy: Int) -> (partialValue: BigUInt, overflow: Bool)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/subscript(bitat:)","title":"subscript(bitAt _: Int) -> Bool","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/word","title":"BigUInt.Word","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/directmultiplicationlimit","title":"static var directMultiplicationLimit: Int","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/compare(_:_:)","title":"static func compare(BigUInt, BigUInt) -> ComparisonResult","type":"method"},{"path":"\/documentation\/bigint\/biguint\/randominteger(lessthan:)","title":"static func randomInteger(lessThan: BigUInt) -> BigUInt","type":"method"},{"path":"\/documentation\/bigint\/biguint\/randominteger(lessthan:using:)","title":"static func randomInteger<RNG>(lessThan: BigUInt, using: inout RNG) -> BigUInt","type":"method"},{"path":"\/documentation\/bigint\/biguint\/randominteger(withexactwidth:)","title":"static func randomInteger(withExactWidth: Int) -> BigUInt","type":"method"},{"path":"\/documentation\/bigint\/biguint\/randominteger(withexactwidth:using:)","title":"static func randomInteger<RNG>(withExactWidth: Int, using: inout RNG) -> BigUInt","type":"method"},{"path":"\/documentation\/bigint\/biguint\/randominteger(withmaximumwidth:)","title":"static func randomInteger(withMaximumWidth: Int) -> BigUInt","type":"method"},{"path":"\/documentation\/bigint\/biguint\/randominteger(withmaximumwidth:using:)","title":"static func randomInteger<RNG>(withMaximumWidth: Int, using: inout RNG) -> BigUInt","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/+(_:)","title":"static func + (Self) -> Self","type":"op"},{"path":"\/documentation\/bigint\/biguint\/+=(_:_:)-3dht1","title":"static func += (inout Self, Self)","type":"op"},{"path":"\/documentation\/bigint\/biguint\/-=(_:_:)-47mle","title":"static func -= (inout Self, Self)","type":"op"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/zero","title":"static var zero: Self","type":"property"}],"path":"\/documentation\/bigint\/biguint\/additivearithmetic-implementations","title":"AdditiveArithmetic Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/startindex","title":"var startIndex: Int","type":"property"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/subscript(_:)","title":"subscript(Int) -> BigUInt.Word","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/firstrange(of:)-4avlo","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/firstrange(of:)-8gbi2","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/indices(of:)","title":"func indices(of: Self.Element) -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/indices(where:)","title":"func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/map(_:)-5b6g","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/removingsubranges(_:)","title":"func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"}],"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"}],"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/filter(_:)-1i5xc","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/filter(_:)-b54c","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/flatmap(_:)-5v20h","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/flatmap(_:)-6lwxh","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/map(_:)-1jmt5","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/sorted(using:)-it6h","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/sorted(using:)-qagl","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/bigint\/biguint\/words-swift.struct\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/bigint\/biguint\/words-swift.struct","title":"BigUInt.Words","type":"struct"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/!=(_:_:)-109o9","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/biguint\/!=(_:_:)-7s9hj","title":"static func != <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/biguint\/&(_:_:)","title":"static func & (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/bigint\/biguint\/&=(_:_:)","title":"static func &= (inout BigUInt, BigUInt)","type":"op"},{"path":"\/documentation\/bigint\/biguint\/*(_:_:)","title":"static func * (BigUInt, BigUInt) -> BigUInt","type":"op"},{"path":"\/documentation\/bigint\/biguint\/*=(_:_:)","title":"static func *= (inout BigUInt, BigUInt)","type":"op"},{"path":"\/documentation\/bigint\/biguint\/+(_:_:)","title":"static func + (BigUInt, BigUInt) -> BigUInt","type":"op"},{"path":"\/documentation\/bigint\/biguint\/+=(_:_:)-7h5bi","title":"static func += (inout BigUInt, BigUInt)","type":"op"},{"path":"\/documentation\/bigint\/biguint\/-(_:_:)","title":"static func - (BigUInt, BigUInt) -> BigUInt","type":"op"},{"path":"\/documentation\/bigint\/biguint\/-=(_:_:)-7gkuo","title":"static func -= (inout BigUInt, BigUInt)","type":"op"},{"path":"\/documentation\/bigint\/biguint\/==(_:_:)-1xms","title":"static func == <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/biguint\/_(_:_:)-4zjdt","title":"static func | (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/bigint\/biguint\/_(_:_:)-55fb1","title":"static func > <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/biguint\/_(_:_:)-5zsxd","title":"static func ^ (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/bigint\/biguint\/_(_:_:)-7d6ky","title":"static func \/ (BigUInt, BigUInt) -> BigUInt","type":"op"},{"path":"\/documentation\/bigint\/biguint\/_(_:_:)-939wz","title":"static func < <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/biguint\/_(_:_:)-lmtg","title":"static func % (BigUInt, BigUInt) -> BigUInt","type":"op"},{"path":"\/documentation\/bigint\/biguint\/_=(_:_:)-4r1a2","title":"static func \/= (inout BigUInt, BigUInt)","type":"op"},{"path":"\/documentation\/bigint\/biguint\/_=(_:_:)-6nrw3","title":"static func |= (inout BigUInt, BigUInt)","type":"op"},{"path":"\/documentation\/bigint\/biguint\/_=(_:_:)-6qcc6","title":"static func %= (inout BigUInt, BigUInt)","type":"op"},{"path":"\/documentation\/bigint\/biguint\/_=(_:_:)-71fgh","title":"static func <= <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/biguint\/_=(_:_:)-7e6lu","title":"static func ^= (inout BigUInt, BigUInt)","type":"op"},{"path":"\/documentation\/bigint\/biguint\/_=(_:_:)-8pmgc","title":"static func >= <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/biguint\/__(_:_:)-2vptt","title":"static func << <Other>(BigUInt, Other) -> BigUInt","type":"op"},{"path":"\/documentation\/bigint\/biguint\/__(_:_:)-5r67m","title":"static func >> <Other>(BigUInt, Other) -> BigUInt","type":"op"},{"path":"\/documentation\/bigint\/biguint\/__(_:_:)-75rdx","title":"static func >> <RHS>(Self, RHS) -> Self","type":"op"},{"path":"\/documentation\/bigint\/biguint\/__(_:_:)-924qx","title":"static func << <RHS>(Self, RHS) -> Self","type":"op"},{"path":"\/documentation\/bigint\/biguint\/__=(_:_:)-75dbc","title":"static func >>= <Other>(inout BigUInt, Other)","type":"op"},{"path":"\/documentation\/bigint\/biguint\/__=(_:_:)-95qlf","title":"static func <<= <Other>(inout BigUInt, Other)","type":"op"},{"path":"\/documentation\/bigint\/biguint\/~(_:)","title":"static func ~ (BigUInt) -> BigUInt","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/init()-nmq2","title":"init()","type":"init"},{"path":"\/documentation\/bigint\/biguint\/init(_:)-5gw2a","title":"init<T>(T)","type":"init"},{"path":"\/documentation\/bigint\/biguint\/init(_:)-9bhcx","title":"init<T>(T)","type":"init"},{"path":"\/documentation\/bigint\/biguint\/init(_:format:lenient:)-5zsmf","title":"init(String, format: IntegerFormatStyle<Self>, lenient: Bool) throws","type":"init"},{"path":"\/documentation\/bigint\/biguint\/init(_:format:lenient:)-846lz","title":"init(String, format: IntegerFormatStyle<Self>.Percent, lenient: Bool) throws","type":"init"},{"path":"\/documentation\/bigint\/biguint\/init(_:format:lenient:)-8wged","title":"init(String, format: IntegerFormatStyle<Self>.Currency, lenient: Bool) throws","type":"init"},{"path":"\/documentation\/bigint\/biguint\/init(_:strategy:)-3pf4s","title":"init<S>(S.ParseInput, strategy: S) throws","type":"init"},{"path":"\/documentation\/bigint\/biguint\/init(_:strategy:)-on2v","title":"init<S>(S.ParseInput, strategy: S) throws","type":"init"},{"path":"\/documentation\/bigint\/biguint\/init(clamping:)","title":"init<T>(clamping: T)","type":"init"},{"path":"\/documentation\/bigint\/biguint\/init(exactly:)-3yz6v","title":"init?<T>(exactly: T)","type":"init"},{"path":"\/documentation\/bigint\/biguint\/init(truncatingifneeded:)","title":"init<T>(truncatingIfNeeded: T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/bitwidth","title":"var bitWidth: Int","type":"property"},{"path":"\/documentation\/bigint\/biguint\/trailingzerobitcount","title":"var trailingZeroBitCount: Int","type":"property"},{"path":"\/documentation\/bigint\/biguint\/words-swift.property","title":"var words: BigUInt.Words","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/bigint\/biguint\/formatted(_:)-2d6da","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/bigint\/biguint\/formatted(_:)-9ivms","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/bigint\/biguint\/ismultiple(of:)","title":"func isMultiple(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/bigint\/biguint\/quotientandremainder(dividingby:)","title":"func quotientAndRemainder(dividingBy: BigUInt) -> (quotient: BigUInt, remainder: BigUInt)","type":"method"},{"path":"\/documentation\/bigint\/biguint\/signum()","title":"func signum() -> BigUInt","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/issigned-7t7ce","title":"static var isSigned: Bool","type":"property"}],"path":"\/documentation\/bigint\/biguint\/binaryinteger-implementations","title":"BinaryInteger Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/'...(_:)-993l9","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/bigint\/biguint\/'...(_:)-jf8p","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/bigint\/biguint\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/bigint\/biguint\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/bigint\/biguint\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/bigint\/biguint\/_(_:_:)-5fu7s","title":"static func < (BigUInt, BigUInt) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/biguint\/_(_:_:)-757ft","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/biguint\/_(_:_:)-971ls","title":"static func < (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/biguint\/_(_:_:)-kd14","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/biguint\/_=(_:_:)-5b48p","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/biguint\/_=(_:_:)-62ah6","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/biguint\/_=(_:_:)-81srf","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/biguint\/_=(_:_:)-9gc8b","title":"static func >= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/bigint\/biguint\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/playgrounddescription","title":"var playgroundDescription: Any","type":"property"}],"path":"\/documentation\/bigint\/biguint\/customplaygrounddisplayconvertible-implementations","title":"CustomPlaygroundDisplayConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/bigint\/biguint\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/init(from:)","title":"init(from: any Decoder) throws","type":"init"}],"path":"\/documentation\/bigint\/biguint\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/bigint\/biguint\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/!=(_:_:)-8cdci","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/biguint\/==(_:_:)-5amrc","title":"static func == (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/bigint\/biguint\/==(_:_:)-892yw","title":"static func == (BigUInt, BigUInt) -> Bool","type":"op"}],"path":"\/documentation\/bigint\/biguint\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/init(extendedgraphemeclusterliteral:)-2i1o","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"},{"path":"\/documentation\/bigint\/biguint\/init(extendedgraphemeclusterliteral:)-68n70","title":"init(extendedGraphemeClusterLiteral: String)","type":"init"}],"path":"\/documentation\/bigint\/biguint\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/init(integerliteral:)","title":"init(integerLiteral: UInt64)","type":"init"}],"path":"\/documentation\/bigint\/biguint\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/init(stringliteral:)","title":"init(stringLiteral: StringLiteralType)","type":"init"}],"path":"\/documentation\/bigint\/biguint\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: UnicodeScalar)","type":"init"}],"path":"\/documentation\/bigint\/biguint\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/bigint\/biguint\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/init(exactly:)-8jpdx","title":"init?<T>(exactly: T)","type":"init"}],"path":"\/documentation\/bigint\/biguint\/numeric-implementations","title":"Numeric Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/advanced(by:)","title":"func advanced(by: BigInt) -> BigUInt","type":"method"},{"path":"\/documentation\/bigint\/biguint\/distance(to:)","title":"func distance(to: BigUInt) -> BigInt","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/stride","title":"BigUInt.Stride","type":"typealias"}],"path":"\/documentation\/bigint\/biguint\/strideable-implementations","title":"Strideable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/magnitude","title":"var magnitude: Self","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/bigint\/biguint\/issigned-996wk","title":"static var isSigned: Bool","type":"property"}],"path":"\/documentation\/bigint\/biguint\/unsignedinteger-implementations","title":"UnsignedInteger Implementations","type":"symbol"}],"path":"\/documentation\/bigint\/biguint","title":"BigUInt","type":"struct"},{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Protocols","type":"groupMarker"},{"path":"\/documentation\/bigint\/swift\/binaryfloatingpoint","title":"BinaryFloatingPoint","type":"extension"},{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/bigint\/swift\/string\/init(_:)","title":"init(BigUInt)","type":"init"},{"path":"\/documentation\/bigint\/swift\/string\/init(_:radix:uppercase:)-247k6","title":"init(BigUInt, radix: Int, uppercase: Bool)","type":"init"},{"path":"\/documentation\/bigint\/swift\/string\/init(_:radix:uppercase:)-2sg1t","title":"init(BigInt, radix: Int, uppercase: Bool)","type":"init"}],"path":"\/documentation\/bigint\/swift\/string","title":"String","type":"extension"}],"path":"\/documentation\/bigint\/swift","title":"Swift","type":"extension"}],"path":"\/documentation\/bigint","title":"BigInt","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":2}}